// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UnderSea.Dal.Data;

namespace UnderSea.Dal.Migrations
{
    [DbContext(typeof(UnderSeaDbContext))]
    partial class UnderSeaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UnderSea.Model.Models.ActiveConstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedFinish")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("CountryId");

                    b.ToTable("ActiveConstructions");
                });

            modelBuilder.Entity("UnderSea.Model.Models.ActiveUpgrading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedFinish")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UpgradeId");

                    b.ToTable("ActiveUpgradings");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Attack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttackRound")
                        .HasColumnType("int");

                    b.Property<int>("AttackerCountryId")
                        .HasColumnType("int");

                    b.Property<int>("DefenderCountryId")
                        .HasColumnType("int");

                    b.Property<string>("WinnerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AttackerCountryId");

                    b.HasIndex("DefenderCountryId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("UnderSea.Model.Models.AttackUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttackId")
                        .HasColumnType("int");

                    b.Property<int>("BattlesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttackId");

                    b.HasIndex("UnitId");

                    b.ToTable("AttackUnits");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConstructionTime")
                        .HasColumnType("int");

                    b.Property<string>("IconImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConstructionTime = 5,
                            IconImageUrl = "https://underseastorage.blob.core.windows.net/buildingicons/flowcontrol.png",
                            ImageUrl = "https://underseastorage.blob.core.windows.net/buildings/flowcontrol_hd.png",
                            Name = "Áramlásirányító"
                        },
                        new
                        {
                            Id = 2,
                            ConstructionTime = 5,
                            IconImageUrl = "https://underseastorage.blob.core.windows.net/buildingicons/castle.png",
                            ImageUrl = "https://underseastorage.blob.core.windows.net/buildings/castle_hd.png",
                            Name = "Zátonyvár"
                        },
                        new
                        {
                            Id = 3,
                            ConstructionTime = 5,
                            IconImageUrl = "https://underseastorage.blob.core.windows.net/buildingicons/stone_mine.png",
                            ImageUrl = "https://underseastorage.blob.core.windows.net/buildings/stone_mine.png",
                            Name = "Kőbánya"
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.BuildingEffect", b =>
                {
                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("EffectId")
                        .HasColumnType("int");

                    b.HasKey("BuildingId", "EffectId");

                    b.HasIndex("EffectId");

                    b.ToTable("BuildingEffects");

                    b.HasData(
                        new
                        {
                            BuildingId = 1,
                            EffectId = 1
                        },
                        new
                        {
                            BuildingId = 1,
                            EffectId = 2
                        },
                        new
                        {
                            BuildingId = 2,
                            EffectId = 3
                        },
                        new
                        {
                            BuildingId = 3,
                            EffectId = 10
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaxUnitCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<int>("WorldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasFilter("[OwnerId] IS NOT NULL");

                    b.HasIndex("WorldId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxUnitCount = 100,
                            Name = "Center",
                            OwnerId = "af378505-14cb-4f49-bb01-ba2c8fdef77d",
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 2,
                            MaxUnitCount = 100,
                            Name = "Melrose",
                            OwnerId = "72ff37e8-5888-47c6-9ad7-15844a6449b1",
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 3,
                            MaxUnitCount = 100,
                            Name = "Gale",
                            OwnerId = "a63a97aa-4ae8-4185-8621-be02286b1542",
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 4,
                            MaxUnitCount = 100,
                            Name = "Algoma",
                            OwnerId = "c4393fff-8d3a-4508-9245-794916e9e997",
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 5,
                            MaxUnitCount = 100,
                            Name = "Carioca",
                            OwnerId = "cbbd70fb-06cd-4368-af10-93c237980d8c",
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 6,
                            MaxUnitCount = 100,
                            Name = "Norway Maple",
                            OwnerId = "392a9574-11a7-4f01-add1-4980933cc7a6",
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 7,
                            MaxUnitCount = 100,
                            Name = "Melody",
                            OwnerId = "bf37d8cc-0744-4054-9fe1-603e6829799a",
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 8,
                            MaxUnitCount = 100,
                            Name = "Kipling",
                            OwnerId = "488d40fe-e2c5-41e3-b2d9-dea16b7c2897",
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 9,
                            MaxUnitCount = 100,
                            Name = "Londonderry",
                            OwnerId = "0b62f843-4357-423b-83d0-a2506ac91d5c",
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 10,
                            MaxUnitCount = 100,
                            Name = "Arkansas",
                            OwnerId = "c0b59d8d-58cc-4a54-a045-bf2a9341c658",
                            Population = 100,
                            WorldId = 1
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.CountryBuilding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryBuildings");
                });

            modelBuilder.Entity("UnderSea.Model.Models.CountryUnit", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("BattlesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("CountryId", "UnitId", "BattlesPlayed");

                    b.HasIndex("UnitId");

                    b.ToTable("CountryUnits");
                });

            modelBuilder.Entity("UnderSea.Model.Models.CountryUpgrade", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeId")
                        .HasColumnType("int");

                    b.HasKey("CountryId", "UpgradeId");

                    b.HasIndex("UpgradeId");

                    b.ToTable("CountryUpgrades");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Effect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EffectType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("effect_type");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Effects");

                    b.HasDiscriminator<string>("EffectType").HasValue("effect_base");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pestis"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Víz alatti tűz"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Aranybánya"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Jó termés"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rossz termés"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Elégedett katonák"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Elégedetlen katonák"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Elégedett emberek"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Elégedetlen emberek"
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Joins.BuildingMaterial", b =>
                {
                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("BuildingId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("BuildingMaterials");

                    b.HasData(
                        new
                        {
                            BuildingId = 1,
                            MaterialId = 1,
                            Amount = 1000
                        },
                        new
                        {
                            BuildingId = 1,
                            MaterialId = 3,
                            Amount = 50
                        },
                        new
                        {
                            BuildingId = 2,
                            MaterialId = 1,
                            Amount = 1000
                        },
                        new
                        {
                            BuildingId = 2,
                            MaterialId = 3,
                            Amount = 50
                        },
                        new
                        {
                            BuildingId = 3,
                            MaterialId = 1,
                            Amount = 1000
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Joins.CountryEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("EventRound")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("EventId");

                    b.ToTable("CountryEvents");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Joins.CountryMaterial", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BaseProduction")
                        .HasColumnType("int");

                    b.Property<double>("Multiplier")
                        .HasColumnType("float");

                    b.HasKey("CountryId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("CountryMaterials");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            MaterialId = 1,
                            Amount = 5000,
                            BaseProduction = 200,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 1,
                            MaterialId = 2,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 1,
                            MaterialId = 3,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 2,
                            MaterialId = 1,
                            Amount = 5000,
                            BaseProduction = 200,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 2,
                            MaterialId = 2,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 2,
                            MaterialId = 3,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 3,
                            MaterialId = 1,
                            Amount = 5000,
                            BaseProduction = 200,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 3,
                            MaterialId = 2,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 3,
                            MaterialId = 3,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 4,
                            MaterialId = 1,
                            Amount = 5000,
                            BaseProduction = 200,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 4,
                            MaterialId = 2,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 4,
                            MaterialId = 3,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 5,
                            MaterialId = 1,
                            Amount = 5000,
                            BaseProduction = 200,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 5,
                            MaterialId = 2,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 5,
                            MaterialId = 3,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 6,
                            MaterialId = 1,
                            Amount = 5000,
                            BaseProduction = 200,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 6,
                            MaterialId = 2,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 6,
                            MaterialId = 3,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 7,
                            MaterialId = 1,
                            Amount = 5000,
                            BaseProduction = 200,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 7,
                            MaterialId = 2,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 7,
                            MaterialId = 3,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 8,
                            MaterialId = 1,
                            Amount = 5000,
                            BaseProduction = 200,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 8,
                            MaterialId = 2,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 8,
                            MaterialId = 3,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 9,
                            MaterialId = 1,
                            Amount = 5000,
                            BaseProduction = 200,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 9,
                            MaterialId = 2,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 9,
                            MaterialId = 3,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 10,
                            MaterialId = 1,
                            Amount = 5000,
                            BaseProduction = 200,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 10,
                            MaterialId = 2,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        },
                        new
                        {
                            CountryId = 10,
                            MaterialId = 3,
                            Amount = 0,
                            BaseProduction = 0,
                            Multiplier = 1.0
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Joins.EventEffect", b =>
                {
                    b.Property<int>("EffectId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("EffectId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventEffects");

                    b.HasData(
                        new
                        {
                            EffectId = 11,
                            EventId = 1
                        },
                        new
                        {
                            EffectId = 12,
                            EventId = 2
                        },
                        new
                        {
                            EffectId = 13,
                            EventId = 3
                        },
                        new
                        {
                            EffectId = 14,
                            EventId = 4
                        },
                        new
                        {
                            EffectId = 15,
                            EventId = 5
                        },
                        new
                        {
                            EffectId = 16,
                            EventId = 6
                        },
                        new
                        {
                            EffectId = 17,
                            EventId = 7
                        },
                        new
                        {
                            EffectId = 18,
                            EventId = 8
                        },
                        new
                        {
                            EffectId = 19,
                            EventId = 9
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Joins.UnitMaterial", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("UnitId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("UnitMaterials");

                    b.HasData(
                        new
                        {
                            UnitId = 1,
                            MaterialId = 1,
                            Amount = 50
                        },
                        new
                        {
                            UnitId = 2,
                            MaterialId = 1,
                            Amount = 50
                        },
                        new
                        {
                            UnitId = 3,
                            MaterialId = 1,
                            Amount = 100
                        },
                        new
                        {
                            UnitId = 4,
                            MaterialId = 1,
                            Amount = 50
                        },
                        new
                        {
                            UnitId = 5,
                            MaterialId = 1,
                            Amount = 200
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Materials.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("material_type");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://underseastorage.blob.core.windows.net/currency/shell.svg",
                            MaterialType = "material_pearl",
                            Name = "gyöngy"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://underseastorage.blob.core.windows.net/currency/coral.svg",
                            MaterialType = "material_coral",
                            Name = "korall"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://underseastorage.blob.core.windows.net/currency/stone.png",
                            MaterialType = "material_stone",
                            Name = "kő"
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.SpyReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DefensePoints")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSpies")
                        .HasColumnType("int");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int>("SpiedCountryId")
                        .HasColumnType("int");

                    b.Property<int>("SpySenderCountryId")
                        .HasColumnType("int");

                    b.Property<string>("WinnerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SpiedCountryId");

                    b.HasIndex("SpySenderCountryId");

                    b.HasIndex("WinnerId");

                    b.ToTable("SpyReports");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MercenaryPerRound")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplyPerRound")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://underseastorage.blob.core.windows.net/units/seal.svg",
                            MercenaryPerRound = 1,
                            Name = "Rohamfóka",
                            SupplyPerRound = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://underseastorage.blob.core.windows.net/units/seahorse.svg",
                            MercenaryPerRound = 1,
                            Name = "Csatacsikó",
                            SupplyPerRound = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://underseastorage.blob.core.windows.net/units/shark.svg",
                            MercenaryPerRound = 3,
                            Name = "Lézercápa",
                            SupplyPerRound = 2
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://underseastorage.blob.core.windows.net/units/spy.png",
                            MercenaryPerRound = 1,
                            Name = "Felfedező",
                            SupplyPerRound = 1
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://underseastorage.blob.core.windows.net/units/general.png",
                            MercenaryPerRound = 4,
                            Name = "Hadvezér",
                            SupplyPerRound = 2
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.UnitLevel", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("AttackPoint")
                        .HasColumnType("int");

                    b.Property<int>("DefensePoint")
                        .HasColumnType("int");

                    b.Property<int>("MinimumBattles")
                        .HasColumnType("int");

                    b.HasKey("UnitId", "Level");

                    b.ToTable("UnitLevels");

                    b.HasData(
                        new
                        {
                            UnitId = 1,
                            Level = 1,
                            AttackPoint = 6,
                            DefensePoint = 2,
                            MinimumBattles = 0
                        },
                        new
                        {
                            UnitId = 1,
                            Level = 2,
                            AttackPoint = 8,
                            DefensePoint = 3,
                            MinimumBattles = 3
                        },
                        new
                        {
                            UnitId = 1,
                            Level = 3,
                            AttackPoint = 10,
                            DefensePoint = 5,
                            MinimumBattles = 5
                        },
                        new
                        {
                            UnitId = 2,
                            Level = 1,
                            AttackPoint = 2,
                            DefensePoint = 6,
                            MinimumBattles = 0
                        },
                        new
                        {
                            UnitId = 2,
                            Level = 2,
                            AttackPoint = 3,
                            DefensePoint = 8,
                            MinimumBattles = 3
                        },
                        new
                        {
                            UnitId = 2,
                            Level = 3,
                            AttackPoint = 5,
                            DefensePoint = 10,
                            MinimumBattles = 5
                        },
                        new
                        {
                            UnitId = 3,
                            Level = 1,
                            AttackPoint = 5,
                            DefensePoint = 5,
                            MinimumBattles = 0
                        },
                        new
                        {
                            UnitId = 3,
                            Level = 2,
                            AttackPoint = 7,
                            DefensePoint = 7,
                            MinimumBattles = 3
                        },
                        new
                        {
                            UnitId = 3,
                            Level = 3,
                            AttackPoint = 10,
                            DefensePoint = 10,
                            MinimumBattles = 5
                        },
                        new
                        {
                            UnitId = 4,
                            Level = 1,
                            AttackPoint = 0,
                            DefensePoint = 0,
                            MinimumBattles = 0
                        },
                        new
                        {
                            UnitId = 5,
                            Level = 1,
                            AttackPoint = 0,
                            DefensePoint = 0,
                            MinimumBattles = 0
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Upgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpgradeTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Upgrades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://underseastorage.blob.core.windows.net/upgrades/tractor.png",
                            Name = "Iszaptraktor",
                            UpgradeTime = 15
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://underseastorage.blob.core.windows.net/upgrades/submarine.png",
                            Name = "Iszapkombájn",
                            UpgradeTime = 15
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://underseastorage.blob.core.windows.net/upgrades/coral_wall.png",
                            Name = "Korallfal",
                            UpgradeTime = 15
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://underseastorage.blob.core.windows.net/upgrades/sonar.png",
                            Name = "Szonárágyú",
                            UpgradeTime = 15
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://underseastorage.blob.core.windows.net/upgrades/seastar.png",
                            Name = "Vízalatti harcművészetek",
                            UpgradeTime = 15
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://underseastorage.blob.core.windows.net/upgrades/potion.png",
                            Name = "Alkímia",
                            UpgradeTime = 15
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.UpgradeEffect", b =>
                {
                    b.Property<int>("EffectId")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeId")
                        .HasColumnType("int");

                    b.HasKey("EffectId", "UpgradeId");

                    b.HasIndex("UpgradeId");

                    b.ToTable("UpgradeEffects");

                    b.HasData(
                        new
                        {
                            EffectId = 4,
                            UpgradeId = 1
                        },
                        new
                        {
                            EffectId = 5,
                            UpgradeId = 2
                        },
                        new
                        {
                            EffectId = 6,
                            UpgradeId = 3
                        },
                        new
                        {
                            EffectId = 7,
                            UpgradeId = 4
                        },
                        new
                        {
                            EffectId = 8,
                            UpgradeId = 5
                        },
                        new
                        {
                            EffectId = 9,
                            UpgradeId = 6
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "af378505-14cb-4f49-bb01-ba2c8fdef77d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "SSTRAHAN0",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "sstrahan0"
                        },
                        new
                        {
                            Id = "72ff37e8-5888-47c6-9ad7-15844a6449b1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "LTIPPIN1",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "ltippin1"
                        },
                        new
                        {
                            Id = "a63a97aa-4ae8-4185-8621-be02286b1542",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BLYPTRATT2",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "blyptratt2"
                        },
                        new
                        {
                            Id = "c4393fff-8d3a-4508-9245-794916e9e997",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JMELIOR3",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "jmelior3"
                        },
                        new
                        {
                            Id = "cbbd70fb-06cd-4368-af10-93c237980d8c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TMAXWORTHY4",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "tmaxworthy4"
                        },
                        new
                        {
                            Id = "392a9574-11a7-4f01-add1-4980933cc7a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "HCHEVERELL5",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "hcheverell5"
                        },
                        new
                        {
                            Id = "bf37d8cc-0744-4054-9fe1-603e6829799a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "GBOSKELL6",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "gboskell6"
                        },
                        new
                        {
                            Id = "488d40fe-e2c5-41e3-b2d9-dea16b7c2897",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ERYLETT7",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "erylett7"
                        },
                        new
                        {
                            Id = "0b62f843-4357-423b-83d0-a2506ac91d5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "KSEELY8",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "kseely8"
                        },
                        new
                        {
                            Id = "c0b59d8d-58cc-4a54-a045-bf2a9341c658",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "HFILINKOV9",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "hfilinkov9"
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.World", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Worlds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Round = 1
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.WorldWinner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorldRound")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WorldWinners");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Alchemy", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("upgrade_effect_alchemy");

                    b.HasData(
                        new
                        {
                            Id = 9,
                            Name = "Növeli a beszedett adót 30%-kal"
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.CoralEffect", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("effect_coral");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "200 korallt termel körönként"
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.CoralWall", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("upgrade_effect_coralwall");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            Name = "Növeli a védelmi pontokat 20%-kal"
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Effects.StoneEffect", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("effect_stone");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Name = "25 követ termel körönként"
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Events.BadHarvest", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("BadHarvest");

                    b.HasData(
                        new
                        {
                            Id = 15,
                            Name = "Minden áramlásirányító 150 korallt ad ebben a körben."
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Events.Goldmine", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("Goldmine");

                    b.HasData(
                        new
                        {
                            Id = 13,
                            Name = "Az embereid felfedeztek egy új aranybányát, kapsz 1000 bónusz gyöngyöt."
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Events.GoodHarvest", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("GoodHarvest");

                    b.HasData(
                        new
                        {
                            Id = 14,
                            Name = "Minden áramlásirányító 250 korallt ad ebben a körben."
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Events.PlagueEffect", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("PlagueEffect");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Name = " Az országodban kitört a pestis, elveszítesz 50 embert és egy áramlásirányítót."
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Events.SatisfiedPeople", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("SatisfiedPeople");

                    b.HasData(
                        new
                        {
                            Id = 18,
                            Name = "Az országodban elégedettek az emberek, ezért extra 50 ember költözött be és építettek maguknak egy áramlásirányítót"
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Events.SatisfiedUnits", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("SatisfiedUnits");

                    b.HasData(
                        new
                        {
                            Id = 16,
                            Name = "Katonáid elégedettek ebben a körben, minden katona támadása nő eggyel."
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Events.UnsatisfiedPeople", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("UnsatisfiedPeople");

                    b.HasData(
                        new
                        {
                            Id = 19,
                            Name = "Az országodban elégedetlenek az emberek, ezért 50 ember elköltözött és az áramlásirányítójuk lerombolták"
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Events.UnsatisfiedUnits", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("UnsatisfiedUnits");

                    b.HasData(
                        new
                        {
                            Id = 17,
                            Name = "Katonáid elégedetlenek ebben a körben, minden katona támadása csökken eggyel."
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Events.WaterFire", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("WaterFire");

                    b.HasData(
                        new
                        {
                            Id = 12,
                            Name = "Az országodban tűz ütött ki és leégett egy zátonyvár."
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.MilitaryEffect", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("effect_military");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "200 egység katonának nyújt szállást"
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.MudCombine", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("upgrade_effect_mudcombine");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Name = "Növeli a korall termesztést 15%-kal"
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.MudTractor", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("upgrade_effect_mudtractor");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Name = "Növeli a korall termesztést 10%-kal"
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.PopulationEffect", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("effect_population");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "50 lakost ad a népességhez"
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.SonarCanon", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("upgrade_effect_sonarcannon");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            Name = "Növeli a támadó pontokat 20%-kal"
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.UnderwaterMartialArt", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("upgrade_effect_martialart");

                    b.HasData(
                        new
                        {
                            Id = 8,
                            Name = "Növeli a védelmi és támadóerőt pontokat 10%-kal"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UnderSea.Model.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UnderSea.Model.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UnderSea.Model.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnderSea.Model.Models.ActiveConstruction", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Building", "Building")
                        .WithMany("ActiveConstructions")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Country", "Country")
                        .WithMany("ActiveConstructions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("UnderSea.Model.Models.ActiveUpgrading", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Country", "Country")
                        .WithMany("ActiveUpgradings")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Upgrade", "Upgrade")
                        .WithMany("ActiveUpgradings")
                        .HasForeignKey("UpgradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Upgrade");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Attack", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Country", "AttackerCountry")
                        .WithMany("Attacks")
                        .HasForeignKey("AttackerCountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Country", "DefenderCountry")
                        .WithMany("Defenses")
                        .HasForeignKey("DefenderCountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.User", "Winner")
                        .WithMany("AttackWins")
                        .HasForeignKey("WinnerId");

                    b.Navigation("AttackerCountry");

                    b.Navigation("DefenderCountry");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("UnderSea.Model.Models.AttackUnit", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Attack", "Attack")
                        .WithMany("AttackUnits")
                        .HasForeignKey("AttackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attack");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("UnderSea.Model.Models.BuildingEffect", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Building", "Building")
                        .WithMany("BuildingEffects")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Effect", "Effect")
                        .WithMany("BuildingEffects")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Country", b =>
                {
                    b.HasOne("UnderSea.Model.Models.User", "Owner")
                        .WithOne("Country")
                        .HasForeignKey("UnderSea.Model.Models.Country", "OwnerId");

                    b.HasOne("UnderSea.Model.Models.World", "World")
                        .WithMany("Countries")
                        .HasForeignKey("WorldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("UnderSea.Model.Models.FightPoint", "FightPoint", b1 =>
                        {
                            b1.Property<int>("CountryId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("AttackPointMultiplier")
                                .HasColumnType("float");

                            b1.Property<double>("BonusAttackPoint")
                                .HasColumnType("float");

                            b1.Property<double>("DefensePointMultiplier")
                                .HasColumnType("float");

                            b1.HasKey("CountryId");

                            b1.ToTable("Countries");

                            b1.WithOwner()
                                .HasForeignKey("CountryId");

                            b1.HasData(
                                new
                                {
                                    CountryId = 1,
                                    AttackPointMultiplier = 1.0,
                                    BonusAttackPoint = 0.0,
                                    DefensePointMultiplier = 1.0
                                },
                                new
                                {
                                    CountryId = 2,
                                    AttackPointMultiplier = 1.0,
                                    BonusAttackPoint = 0.0,
                                    DefensePointMultiplier = 1.0
                                },
                                new
                                {
                                    CountryId = 3,
                                    AttackPointMultiplier = 1.0,
                                    BonusAttackPoint = 0.0,
                                    DefensePointMultiplier = 1.0
                                },
                                new
                                {
                                    CountryId = 4,
                                    AttackPointMultiplier = 1.0,
                                    BonusAttackPoint = 0.0,
                                    DefensePointMultiplier = 1.0
                                },
                                new
                                {
                                    CountryId = 5,
                                    AttackPointMultiplier = 1.0,
                                    BonusAttackPoint = 0.0,
                                    DefensePointMultiplier = 1.0
                                },
                                new
                                {
                                    CountryId = 6,
                                    AttackPointMultiplier = 1.0,
                                    BonusAttackPoint = 0.0,
                                    DefensePointMultiplier = 1.0
                                },
                                new
                                {
                                    CountryId = 7,
                                    AttackPointMultiplier = 1.0,
                                    BonusAttackPoint = 0.0,
                                    DefensePointMultiplier = 1.0
                                },
                                new
                                {
                                    CountryId = 8,
                                    AttackPointMultiplier = 1.0,
                                    BonusAttackPoint = 0.0,
                                    DefensePointMultiplier = 1.0
                                },
                                new
                                {
                                    CountryId = 9,
                                    AttackPointMultiplier = 1.0,
                                    BonusAttackPoint = 0.0,
                                    DefensePointMultiplier = 1.0
                                },
                                new
                                {
                                    CountryId = 10,
                                    AttackPointMultiplier = 1.0,
                                    BonusAttackPoint = 0.0,
                                    DefensePointMultiplier = 1.0
                                });
                        });

                    b.Navigation("FightPoint");

                    b.Navigation("Owner");

                    b.Navigation("World");
                });

            modelBuilder.Entity("UnderSea.Model.Models.CountryBuilding", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Building", "Building")
                        .WithMany("CountryBuildings")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Country", "Country")
                        .WithMany("CountryBuildings")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("UnderSea.Model.Models.CountryUnit", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Country", "Country")
                        .WithMany("CountryUnits")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Unit", "Unit")
                        .WithMany("CountryUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("UnderSea.Model.Models.CountryUpgrade", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Country", "Country")
                        .WithMany("CountryUpgrades")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Upgrade", "Upgrade")
                        .WithMany("CountryUpgrades")
                        .HasForeignKey("UpgradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Upgrade");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Joins.BuildingMaterial", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Building", "Building")
                        .WithMany("BuildingMaterials")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Joins.CountryEvent", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Country", "Country")
                        .WithMany("CountryEvents")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Event", "Event")
                        .WithMany("CountryEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Joins.CountryMaterial", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Country", "Country")
                        .WithMany("CountryMaterials")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Joins.EventEffect", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Event", "Event")
                        .WithMany("EventEffects")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Joins.UnitMaterial", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Unit", "Unit")
                        .WithMany("UnitMaterials")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("UnderSea.Model.Models.SpyReport", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Country", "SpiedCountry")
                        .WithMany()
                        .HasForeignKey("SpiedCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Country", "SpySenderCountry")
                        .WithMany("SentSpies")
                        .HasForeignKey("SpySenderCountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.User", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");

                    b.Navigation("SpiedCountry");

                    b.Navigation("SpySenderCountry");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("UnderSea.Model.Models.UnitLevel", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Unit", "Unit")
                        .WithMany("UnitLevels")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("UnderSea.Model.Models.UpgradeEffect", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Effect", "Effect")
                        .WithMany("UpgradeEffects")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Upgrade", "Upgrade")
                        .WithMany("UpgradeEffects")
                        .HasForeignKey("UpgradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("Upgrade");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Attack", b =>
                {
                    b.Navigation("AttackUnits");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Building", b =>
                {
                    b.Navigation("ActiveConstructions");

                    b.Navigation("BuildingEffects");

                    b.Navigation("BuildingMaterials");

                    b.Navigation("CountryBuildings");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Country", b =>
                {
                    b.Navigation("ActiveConstructions");

                    b.Navigation("ActiveUpgradings");

                    b.Navigation("Attacks");

                    b.Navigation("CountryBuildings");

                    b.Navigation("CountryEvents");

                    b.Navigation("CountryMaterials");

                    b.Navigation("CountryUnits");

                    b.Navigation("CountryUpgrades");

                    b.Navigation("Defenses");

                    b.Navigation("SentSpies");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Effect", b =>
                {
                    b.Navigation("BuildingEffects");

                    b.Navigation("UpgradeEffects");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Event", b =>
                {
                    b.Navigation("CountryEvents");

                    b.Navigation("EventEffects");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Unit", b =>
                {
                    b.Navigation("CountryUnits");

                    b.Navigation("UnitLevels");

                    b.Navigation("UnitMaterials");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Upgrade", b =>
                {
                    b.Navigation("ActiveUpgradings");

                    b.Navigation("CountryUpgrades");

                    b.Navigation("UpgradeEffects");
                });

            modelBuilder.Entity("UnderSea.Model.Models.User", b =>
                {
                    b.Navigation("AttackWins");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("UnderSea.Model.Models.World", b =>
                {
                    b.Navigation("Countries");
                });
#pragma warning restore 612, 618
        }
    }
}
