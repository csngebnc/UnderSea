// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UnderSea.Dal.Data;

namespace UnderSea.Dal.Migrations
{
    [DbContext(typeof(UnderSeaDbContext))]
    [Migration("20210625134624_Seed_User_World_Country")]
    partial class Seed_User_World_Country
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UnderSea.Model.Models.ActiveConstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedFinish")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("CountryId");

                    b.ToTable("ActiveConstructions");
                });

            modelBuilder.Entity("UnderSea.Model.Models.ActiveUpgrading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedFinish")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UpgradeId");

                    b.ToTable("ActiveUpgradings");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Attack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttackRound")
                        .HasColumnType("int");

                    b.Property<int>("AttackerCountryId")
                        .HasColumnType("int");

                    b.Property<int>("DefenderCountryId")
                        .HasColumnType("int");

                    b.Property<string>("WinnerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AttackerCountryId");

                    b.HasIndex("DefenderCountryId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("UnderSea.Model.Models.AttackUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttackId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttackId");

                    b.HasIndex("UnitId");

                    b.ToTable("AttackUnits");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConstructionTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("UnderSea.Model.Models.BuildingEffect", b =>
                {
                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("EffectId")
                        .HasColumnType("int");

                    b.HasKey("BuildingId", "EffectId");

                    b.HasIndex("EffectId");

                    b.ToTable("BuildingEffects");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Coral")
                        .HasColumnType("int");

                    b.Property<int>("MaxUnitCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Pearl")
                        .HasColumnType("int");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<int>("WorldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasFilter("[OwnerId] IS NOT NULL");

                    b.HasIndex("WorldId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Coral = 10000,
                            MaxUnitCount = 100,
                            Name = "Center",
                            OwnerId = "af378505-14cb-4f49-bb01-ba2c8fdef77d",
                            Pearl = 10000,
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 2,
                            Coral = 10000,
                            MaxUnitCount = 100,
                            Name = "Melrose",
                            OwnerId = "72ff37e8-5888-47c6-9ad7-15844a6449b1",
                            Pearl = 10000,
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 3,
                            Coral = 10000,
                            MaxUnitCount = 100,
                            Name = "Gale",
                            OwnerId = "a63a97aa-4ae8-4185-8621-be02286b1542",
                            Pearl = 10000,
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 4,
                            Coral = 10000,
                            MaxUnitCount = 100,
                            Name = "Algoma",
                            OwnerId = "c4393fff-8d3a-4508-9245-794916e9e997",
                            Pearl = 10000,
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 5,
                            Coral = 10000,
                            MaxUnitCount = 100,
                            Name = "Carioca",
                            OwnerId = "cbbd70fb-06cd-4368-af10-93c237980d8c",
                            Pearl = 10000,
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 6,
                            Coral = 10000,
                            MaxUnitCount = 100,
                            Name = "Norway Maple",
                            OwnerId = "392a9574-11a7-4f01-add1-4980933cc7a6",
                            Pearl = 10000,
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 7,
                            Coral = 10000,
                            MaxUnitCount = 100,
                            Name = "Melody",
                            OwnerId = "bf37d8cc-0744-4054-9fe1-603e6829799a",
                            Pearl = 10000,
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 8,
                            Coral = 10000,
                            MaxUnitCount = 100,
                            Name = "Kipling",
                            OwnerId = "488d40fe-e2c5-41e3-b2d9-dea16b7c2897",
                            Pearl = 10000,
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 9,
                            Coral = 10000,
                            MaxUnitCount = 100,
                            Name = "Londonderry",
                            OwnerId = "0b62f843-4357-423b-83d0-a2506ac91d5c",
                            Pearl = 10000,
                            Population = 100,
                            WorldId = 1
                        },
                        new
                        {
                            Id = 10,
                            Coral = 10000,
                            MaxUnitCount = 100,
                            Name = "Arkansas",
                            OwnerId = "c0b59d8d-58cc-4a54-a045-bf2a9341c658",
                            Pearl = 10000,
                            Population = 100,
                            WorldId = 1
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.CountryBuilding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryBuildings");
                });

            modelBuilder.Entity("UnderSea.Model.Models.CountryUnit", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("CountryId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("CountryUnits");
                });

            modelBuilder.Entity("UnderSea.Model.Models.CountryUpgrade", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeId")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedFinish")
                        .HasColumnType("int");

                    b.HasKey("CountryId", "UpgradeId");

                    b.HasIndex("UpgradeId");

                    b.ToTable("CountryUpgrades");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Effect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EffectType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("effect_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Effects");

                    b.HasDiscriminator<string>("EffectType").HasValue("effect_base");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttackPoint")
                        .HasColumnType("int");

                    b.Property<int>("DefensePoint")
                        .HasColumnType("int");

                    b.Property<int>("MercenaryPerRound")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("SupplyPerRound")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Upgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UpgradeTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Upgrades");
                });

            modelBuilder.Entity("UnderSea.Model.Models.UpgradeEffect", b =>
                {
                    b.Property<int>("EffectId")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeId")
                        .HasColumnType("int");

                    b.HasKey("EffectId", "UpgradeId");

                    b.HasIndex("UpgradeId");

                    b.ToTable("UpgradeEffects");
                });

            modelBuilder.Entity("UnderSea.Model.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "af378505-14cb-4f49-bb01-ba2c8fdef77d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "SSTRAHAN0",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "sstrahan0"
                        },
                        new
                        {
                            Id = "72ff37e8-5888-47c6-9ad7-15844a6449b1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "LTIPPIN1",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "ltippin1"
                        },
                        new
                        {
                            Id = "a63a97aa-4ae8-4185-8621-be02286b1542",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BLYPTRATT2",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "blyptratt2"
                        },
                        new
                        {
                            Id = "c4393fff-8d3a-4508-9245-794916e9e997",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JMELIOR3",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "jmelior3"
                        },
                        new
                        {
                            Id = "cbbd70fb-06cd-4368-af10-93c237980d8c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TMAXWORTHY4",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "tmaxworthy4"
                        },
                        new
                        {
                            Id = "392a9574-11a7-4f01-add1-4980933cc7a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "HCHEVERELL5",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "hcheverell5"
                        },
                        new
                        {
                            Id = "bf37d8cc-0744-4054-9fe1-603e6829799a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "GBOSKELL6",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "gboskell6"
                        },
                        new
                        {
                            Id = "488d40fe-e2c5-41e3-b2d9-dea16b7c2897",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ERYLETT7",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "erylett7"
                        },
                        new
                        {
                            Id = "0b62f843-4357-423b-83d0-a2506ac91d5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "KSEELY8",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "kseely8"
                        },
                        new
                        {
                            Id = "c0b59d8d-58cc-4a54-a045-bf2a9341c658",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "HFILINKOV9",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKLF5tLrJUpIeFkr0WDBFQ6qYyrHKP4JyYyJHUET8mJFsSSNPZiWHkvC4Fv2AcQmg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "hfilinkov9"
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.World", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Worlds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Round = 1
                        });
                });

            modelBuilder.Entity("UnderSea.Model.Models.Alchemy", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("upgrade_effect_alchemy");
                });

            modelBuilder.Entity("UnderSea.Model.Models.CoralEffect", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("effect_coral");
                });

            modelBuilder.Entity("UnderSea.Model.Models.CoralWall", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("upgrade_effect_coralwall");
                });

            modelBuilder.Entity("UnderSea.Model.Models.MilitaryEffect", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("effect_military");
                });

            modelBuilder.Entity("UnderSea.Model.Models.MudCombine", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("upgrade_effect_mudcombine");
                });

            modelBuilder.Entity("UnderSea.Model.Models.MudTractor", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("upgrade_effect_mudtractor");
                });

            modelBuilder.Entity("UnderSea.Model.Models.PopulationEffect", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("effect_population");
                });

            modelBuilder.Entity("UnderSea.Model.Models.SonarCanon", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("upgrade_effect_sonarcannon");
                });

            modelBuilder.Entity("UnderSea.Model.Models.UnderwaterMartialArt", b =>
                {
                    b.HasBaseType("UnderSea.Model.Models.Effect");

                    b.HasDiscriminator().HasValue("upgrade_effect_martialart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UnderSea.Model.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UnderSea.Model.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UnderSea.Model.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnderSea.Model.Models.ActiveConstruction", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Building", "Building")
                        .WithMany("ActiveConstructions")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Country", "Country")
                        .WithMany("ActiveConstructions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("UnderSea.Model.Models.ActiveUpgrading", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Country", "Country")
                        .WithMany("ActiveUpgradings")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Upgrade", "Upgrade")
                        .WithMany("ActiveUpgradings")
                        .HasForeignKey("UpgradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Upgrade");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Attack", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Country", "AttackerCountry")
                        .WithMany("Attacks")
                        .HasForeignKey("AttackerCountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Country", "DefenderCountry")
                        .WithMany("Defenses")
                        .HasForeignKey("DefenderCountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.User", "Winner")
                        .WithMany("AttackWins")
                        .HasForeignKey("WinnerId");

                    b.Navigation("AttackerCountry");

                    b.Navigation("DefenderCountry");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("UnderSea.Model.Models.AttackUnit", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Attack", "Attack")
                        .WithMany("AttackUnits")
                        .HasForeignKey("AttackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attack");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("UnderSea.Model.Models.BuildingEffect", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Building", "Building")
                        .WithMany("BuildingEffects")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Effect", "Effect")
                        .WithMany("BuildingEffects")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Country", b =>
                {
                    b.HasOne("UnderSea.Model.Models.User", "Owner")
                        .WithOne("Country")
                        .HasForeignKey("UnderSea.Model.Models.Country", "OwnerId");

                    b.HasOne("UnderSea.Model.Models.World", "World")
                        .WithMany("Countries")
                        .HasForeignKey("WorldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("UnderSea.Model.Models.FightPoint", "FightPoint", b1 =>
                        {
                            b1.Property<int>("CountryId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("AttackPointMultiplier")
                                .HasColumnType("float");

                            b1.Property<double>("DefensePointMultiplier")
                                .HasColumnType("float");

                            b1.HasKey("CountryId");

                            b1.ToTable("Countries");

                            b1.WithOwner()
                                .HasForeignKey("CountryId");
                        });

                    b.OwnsOne("UnderSea.Model.Models.Production", "Production", b1 =>
                        {
                            b1.Property<int>("CountryId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("BaseCoralProduction")
                                .HasColumnType("int");

                            b1.Property<int>("BasePearlProduction")
                                .HasColumnType("int");

                            b1.Property<double>("CoralProductionMultiplier")
                                .HasColumnType("float");

                            b1.Property<double>("PearlProductionMultiplier")
                                .HasColumnType("float");

                            b1.HasKey("CountryId");

                            b1.ToTable("Countries");

                            b1.WithOwner()
                                .HasForeignKey("CountryId");
                        });

                    b.Navigation("FightPoint");

                    b.Navigation("Owner");

                    b.Navigation("Production");

                    b.Navigation("World");
                });

            modelBuilder.Entity("UnderSea.Model.Models.CountryBuilding", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Building", "Building")
                        .WithMany("CountryBuildings")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Country", "Country")
                        .WithMany("CountryBuildings")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("UnderSea.Model.Models.CountryUnit", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Country", "Country")
                        .WithMany("CountryUnits")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Unit", "Unit")
                        .WithMany("CountryUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("UnderSea.Model.Models.CountryUpgrade", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Country", "Country")
                        .WithMany("CountryUpgrades")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Upgrade", "Upgrade")
                        .WithMany("CountryUpgrades")
                        .HasForeignKey("UpgradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Upgrade");
                });

            modelBuilder.Entity("UnderSea.Model.Models.UpgradeEffect", b =>
                {
                    b.HasOne("UnderSea.Model.Models.Effect", "Effect")
                        .WithMany("UpgradeEffects")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.Model.Models.Upgrade", "Upgrade")
                        .WithMany("UpgradeEffects")
                        .HasForeignKey("UpgradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("Upgrade");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Attack", b =>
                {
                    b.Navigation("AttackUnits");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Building", b =>
                {
                    b.Navigation("ActiveConstructions");

                    b.Navigation("BuildingEffects");

                    b.Navigation("CountryBuildings");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Country", b =>
                {
                    b.Navigation("ActiveConstructions");

                    b.Navigation("ActiveUpgradings");

                    b.Navigation("Attacks");

                    b.Navigation("CountryBuildings");

                    b.Navigation("CountryUnits");

                    b.Navigation("CountryUpgrades");

                    b.Navigation("Defenses");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Effect", b =>
                {
                    b.Navigation("BuildingEffects");

                    b.Navigation("UpgradeEffects");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Unit", b =>
                {
                    b.Navigation("CountryUnits");
                });

            modelBuilder.Entity("UnderSea.Model.Models.Upgrade", b =>
                {
                    b.Navigation("ActiveUpgradings");

                    b.Navigation("CountryUpgrades");

                    b.Navigation("UpgradeEffects");
                });

            modelBuilder.Entity("UnderSea.Model.Models.User", b =>
                {
                    b.Navigation("AttackWins");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("UnderSea.Model.Models.World", b =>
                {
                    b.Navigation("Countries");
                });
#pragma warning restore 612, 618
        }
    }
}
